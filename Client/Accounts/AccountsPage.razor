@page "/"
@page "/accounts"
@using System.ComponentModel.DataAnnotations
@using Accounting.Client
@inject IAccountsClient AccountsClient

<PageTitle>Accounts</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4 mb-2">Accounts</MudText>

<MudCheckBox Checked="showEmptyAccounts" CheckedChanged="new Func<bool, Task>(OnShowEmptyAccountsChecked)" Label="Show empty accounts" Class="mb-4"></MudCheckBox>

@*

<MudSelect T="AccountClass?" Label="Account Class" Value="@accountClass" ValueChanged="OnAccountClassChanged" Class="mb-4">
    <MudSelectItem Value="@((AccountClass?)null)">All</MudSelectItem>
    @foreach (var accountClass in Enum.GetValues<AccountClass>())
    {
        <MudSelectItem Value="@((AccountClass?)accountClass)">@(accountClass.GetAttribute<DisplayAttribute>()?.Name)</MudSelectItem>
    }
</MudSelect>

*@

<MudTable Items="accounts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(accounts is null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Account No</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Balance</MudTh>
    </HeaderContent>
    <RowTemplate Context="account">
        <MudTd DataLabel="Account No">@account.AccountNo</MudTd>
        <MudTd DataLabel="Name">@account.Name</MudTd>
        <MudTd DataLabel="balance">@account.Balance.ToString("c")</MudTd>
    </RowTemplate>
</MudTable>


@code
{
    IEnumerable<Account>? accounts = null;
    bool showEmptyAccounts = false;
    int? accountClass = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        accounts = await AccountsClient.GetAsync(accountClass, showEmptyAccounts);
    }

    async Task OnShowEmptyAccountsChecked(bool v)
    {
        showEmptyAccounts = v;

        await LoadData();

        StateHasChanged();
    }

    async Task OnAccountClassChanged(int? v)
    {
        accountClass = v;

        await LoadData();

        StateHasChanged();
    }
}