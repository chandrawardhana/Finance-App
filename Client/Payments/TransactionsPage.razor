@inject ITransactionsClient TransactionsClient

@page "/transactions"

<PageTitle>Transactions</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Transactions</MudText>

<MudTable ServerData="ServerReload" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>From</MudTh>
        <MudTh>Reference</MudTh>
        <MudTh>Currency</MudTh>
        <MudTh>Amount</MudTh>
    </HeaderContent>
    <RowTemplate Context="transaction">
        <MudTd DataLabel="Id">@transaction.Id</MudTd>
        @* <MudTd DataLabel="Id">@transaction.Date</MudTd> *@
        @* <MudTd DataLabel="Id">@transaction.Status</MudTd> *@
        <MudTd DataLabel="From">@transaction.From</MudTd>
        <MudTd DataLabel="Reference">@transaction.Reference</MudTd>
        <MudTd DataLabel="Currency">@transaction.Currency</MudTd>
        <MudTd DataLabel="Amount">@transaction.Amount.ToString("c")</MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
        bool loading = false;

        private async Task<TableData<TransactionDto>> ServerReload(TableState state)
        {
            loading = true;

            try
            {
                var result = await TransactionsClient.GetTransactionsAsync();

                return new TableData<TransactionDto>() { TotalItems = result.Count(), Items = result };
            }
            finally
            {
                loading = false;
            }
        }

    }