@inject IInvoicesClient InvoicesClient
@inject IDialogService DialogService

@page "/invoices"

<PageTitle>Invoices</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Invoices</MudText>

<MudButton Variant="Variant.Filled" OnClick="NewInvoice" Class="mb-2">New invoice</MudButton>

<MudTable T="InvoiceDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info"
    OnRowClick="async (e) => await UpdateInvoiceStatus(e.Item)">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>SubTotal</MudTh>
        <MudTh>VAT Rate</MudTh>
        <MudTh>VAT</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Paid</MudTh>
    </HeaderContent>
    <RowTemplate Context="invoice">
        <MudTd DataLabel="Id">@invoice.Id</MudTd>
        <MudTd DataLabel="Date">@invoice.Date.ToString("g")</MudTd>
        <MudTd DataLabel="Status">@invoice.Status</MudTd>
        <MudTd DataLabel="Sub Total">@invoice.SubTotal.ToString("c")</MudTd>
        <MudTd DataLabel="VAT Rate">@(invoice.VatRate * 100)%</MudTd>
        <MudTd DataLabel="VAT">@invoice.Vat.ToString("c")</MudTd>
        <MudTd DataLabel="Total">@invoice.Total.ToString("c")</MudTd>
        <MudTd DataLabel="Paid">@invoice.Paid?.ToString("c")</MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<InvoiceDto> table;
    bool loading = false;

    private async Task<TableData<InvoiceDto>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await InvoicesClient.GetInvoicesAsync(state.Page, state.PageSize);

            return new TableData<InvoiceDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    public async Task NewInvoice()
    {
        var dialogRef = DialogService.Show<NewInvoiceDialog>("New invoice");

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        await table.ReloadServerData();
    }

    public async Task UpdateInvoiceStatus(InvoiceDto invoice)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.InvoiceId), invoice.Id);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        await table.ReloadServerData();
    }
}