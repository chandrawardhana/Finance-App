@page "/ledger"
@using Accounting.Client
@inject NavigationManager NavigationManager
@inject IEntriesClient EntriesClient

<PageTitle>@title</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4 mb-2">@title</MudText>

<MudTable Items="entries" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(entries is null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Verification No</MudTh>
        <MudTh colspan="2">Account</MudTh>
        <MudTh>Debit</MudTh>
        <MudTh>Credit</MudTh>
    </HeaderContent>
    <RowTemplate Context="entry">
        <MudTd DataLabel="Verification No">
            <MudLink Href="@($"/verifications?verificationNo={entry.Verification.VerificationNo}")">@entry.Verification.VerificationNo</MudLink>
        </MudTd>
        <MudTd DataLabel="Account No">@entry.Account.AccountNo</MudTd>
        <MudTd DataLabel="Account Name">@entry.Account.Name</MudTd>
        <MudTd DataLabel="Debit">@entry.Debit?.ToString("c")</MudTd>
        <MudTd DataLabel="Credit">@entry.Credit?.ToString("c")</MudTd>
    </RowTemplate>
</MudTable>

@code
{
    IEnumerable<Entry>? entries = null;

    string title = "Ledger";

    [SupplyParameterFromQuery]
    [Parameter]
    public string? VerificationNo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs ea)
    {
        await LoadData();

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task LoadData()
    {
        entries = await EntriesClient.GetAsync(VerificationNo);

        title = $"Ledger";

        if (VerificationNo is not null)
        {
            title = $"Verification {VerificationNo}";
        }
    }
}