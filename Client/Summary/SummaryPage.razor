@page "/"
@using System.ComponentModel.DataAnnotations
@using Accounting.Client
@inject IAccountsClient AccountsClient

<PageTitle>Summary</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Summary</MudText>

<MudText Class="mt-16" Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Account Classes</MudText>

<MudTable Class="mt-8 mb-16" Items="accountClasses" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(accountClasses is null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh colspan="2">Class</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountClassSummary, object>(x=>x.Balance)">Balance</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate Context="accountClass">
        <MudTd DataLabel="Class">@accountClass.Id</MudTd>
        <MudTd DataLabel="Name">@accountClass.Name</MudTd>
        <MudTd DataLabel="Balance">@accountClass.Balance.ToString("c")</MudTd>
    </RowTemplate>
</MudTable>

<MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Balance History</MudText>

<MudChart Class="mt-8" ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>

@code {
    private int[] accounts = new[] { 1510, 1930, 2013, 2018, 2440, 4000,
        3000, 3001, 3002, 3003, 3040, 3041, 3042, 3043, 3050, 3051, 3052, 3053 };

    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = new string[0];

    IEnumerable<AccountClassSummary>? accountClasses = null;

    protected override async Task OnInitializedAsync()
    {
        accountClasses = await AccountsClient.GetAccountClassSummaryAsync(default);

        //options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "c2";
        options.YAxisTicks = 10_000;

        var data = await AccountsClient.GetAccountHistoryAsync(accounts);
        XAxisLabels = data.Labels.ToArray();

        foreach (var d in data.Series)
        {
            Series.Add(new ChartSeries() { Name = d.Name, Data = d.Data.Select(x => (double)x).ToArray() });
        }

        StateHasChanged();
    }
}