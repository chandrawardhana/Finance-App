@page "/verifications"
@using Microsoft.EntityFrameworkCore
@using Accounting.Data
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AccountingContext Context
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Verifications</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4 mb-2">Verifications</MudText>

<MudButton StartIcon="@Icons.Material.Outlined.Add" Link="/verifications/new" Variant="Variant.Filled" Color="Color.Primary" Class="mb-2">
    Add verification
</MudButton>

<MudTable Items="verifications" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(verifications is null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Verification No</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Debit</MudTh>
        <MudTh>Credit</MudTh>
    </HeaderContent>
    <RowTemplate Context="verification">
        <MudTd DataLabel="Verification No">
            <MudLink Href="@($"/ledger?verificationNo={verification.VerificationNo}")">@verification.VerificationNo</MudLink>
        </MudTd>
        <MudTd DataLabel="Date">@verification.Date.ToString("g")</MudTd>
        <MudTd DataLabel="Name">@verification.Description</MudTd>
        <MudTd DataLabel="Debit">@verification.Debit.ToString("c")</MudTd>
        <MudTd DataLabel="Credit">@verification.Credit.ToString("c")</MudTd>
    </RowTemplate>
</MudTable>


@code
{
    IEnumerable<VerificationViewModel>? verifications = null;

    [SupplyParameterFromQuery]
    [Parameter]
    public string? VerificationNo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs ea)
    {
        await LoadData();

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task LoadData()
    {
        var query = Context.Verifications
            .Include(x => x.Entries)
            .AsQueryable();

        if (VerificationNo is not null)
        {
            query = query.Where(e => e.VerificationNo == VerificationNo);
        }

        var r = await query
           .AsNoTracking()
           .AsSplitQuery()
           .ToListAsync();

        var vms = new List<VerificationViewModel>();

        vms.AddRange(r.Select(v => new VerificationViewModel
        {
            VerificationNo = v.VerificationNo,
            Date = v.Date,
            Description = v.Description,
            Debit = v.Entries.Sum(e => e.Debit.GetValueOrDefault()),
            Credit = v.Entries.Sum(e => e.Credit.GetValueOrDefault())
        }));

        verifications = vms;
    }

    private async Task OpenNewVerificationDialog()
    {
        /*
        var dialogReference = DialogService.Show<NewVerificationDialog>("New Verification");

        var result = await dialogReference.Result;

        if (result.Cancelled) return;

        Snackbar.Add("The reactor is running at optimum temperature", Severity.Success);
        */

        NavigationManager.NavigateTo("/verifications/new");
    }

    class VerificationViewModel
    {
        public string VerificationNo { get; set; } = null!;

        public DateTime Date { get; set; }

        public string Description { get; set; } = null!;

        public decimal Debit { get; set; }

        public decimal Credit { get; set; }
    }
}