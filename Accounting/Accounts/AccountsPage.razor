@page "/"
@page "/accounts"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Accounting.Data
@inject AccountingContext Context

<PageTitle>Accounts</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4 mb-2">Accounts</MudText>

<MudCheckBox Checked="showEmptyAccounts" CheckedChanged="new Func<bool, Task>(OnShowEmptyAccountsChecked)" Label="Show empty accounts" Class="mb-4"></MudCheckBox>

<MudSelect T="AccountClass?" Label="Account Class" Value="@accountClass" ValueChanged="OnAccountClassChanged" Class="mb-4">
    <MudSelectItem Value="@((AccountClass?)null)">All</MudSelectItem>
    @foreach (var accountClass in Enum.GetValues<AccountClass>())
    {
        <MudSelectItem Value="@((AccountClass?)accountClass)">@(accountClass.GetAttribute<DisplayAttribute>()?.Name)</MudSelectItem>
    }
</MudSelect>

<MudTable Items="accounts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(accounts is null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Account No</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Balance</MudTh>
    </HeaderContent>
    <RowTemplate Context="account">
        <MudTd DataLabel="Account No">@account.AccountNo</MudTd>
        <MudTd DataLabel="Name">@account.Name</MudTd>
        <MudTd DataLabel="balance">@((account.Debit - account.Credit).ToString("c"))</MudTd>
    </RowTemplate>
</MudTable>


@code
{
    IEnumerable<AccountViewModel>? accounts = null;
    bool showEmptyAccounts = false;
    AccountClass? accountClass = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        var query = Context.Accounts
            .Include(a => a.Entries)
            .AsNoTracking()
            .AsQueryable();

        if (!showEmptyAccounts)
        {
            query = query.Where(a => a.Entries.Any());
        }

        if (accountClass is not null)
        {
            query = query.Where(a => a.Class == accountClass);
        }

        var r = await query.ToListAsync();

        var vms = new List<AccountViewModel>();

        vms.AddRange(r.Select(a => new AccountViewModel
        {
            AccountNo = a.AccountNo,
            Class = (int)a.Class,
            Name = a.Name,
            Description = a.Description,
            Debit = a.Entries.Sum(e => e.Debit.GetValueOrDefault()),
            Credit = a.Entries.Sum(e => e.Credit.GetValueOrDefault())
        }));

        accounts = vms;
    }

    async Task OnShowEmptyAccountsChecked(bool v)
    {
        showEmptyAccounts = v;

        await LoadData();

        StateHasChanged();
    }

    async Task OnAccountClassChanged(AccountClass? v)
    {
        accountClass = v;

        await LoadData();

        StateHasChanged();
    }

    class AccountViewModel
    {
        public int AccountNo { get; set; }

        public int Class { get; set; }

        public string Name { get; set; } = null!;

        public string Description { get; set; } = null!;

        public decimal Debit { get; set; }

        public decimal Credit { get; set; }
    }
}